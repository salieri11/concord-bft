/* [START declaration] */
syntax = "proto3";
package vmware.blockchain.deployment.v1;

import "vmware/blockchain/deployment/v1/concord_cluster.proto";
import "vmware/blockchain/deployment/v1/concord_model.proto";
import "vmware/blockchain/deployment/v1/core.proto";
import "vmware/blockchain/deployment/v1/orchestration.proto";
import "vmware/blockchain/ethereum/type/genesis.proto";
/* [END declaration] */

option go_package = "vmware.com/blockchain/deployment/v1;deployment";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.v1";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Model definition of Concord cluster placement specification.
 *
 * @property[entries]
 *   list of placement entries mapping node deployment to orchestration site targets. The
 *   positional sequence in the collection corresponds to the index of the Concord replica to be
 *   placed.
 */
message PlacementSpecification {
    /**
     * Type of placement strategy to use for a given Concord node in [PlacementSpecification].
     */
    enum Type {
        UNSPECIFIED = 0;
        FIXED = 1;
    }

    /**
     * Model definition of a Concord node placement in [PlacementSpecification].
     *
     * @property[type]
     *   type of placement strategy to utilize for this node slot.
     * @property[site]
     *   orchestration site to use as deployment target for the node corresponding to the slot.
     */
    message Entry {
        Type type = 1;
        OrchestrationSiteIdentifier site = 2;
        OrchestrationSiteInfo site_info = 3;
    }

    repeated Entry entries = 1 [packed=false];
}

/**
 * Model definition of a versions map to send component version information to Helen
 */
message Metadata {
    map<string, string> values = 1;
}

/**
 * Model definition of a Concord node placement assignment derived from [PlacementSpecification].
 *
 * @property[entries]
 *   list of placement assignments mapping node deployment to orchestration site targets. The
 *   positional sequence in the collection corresponds to the index of the Concord replica to be
 *   placed.
 */
message PlacementAssignment {
    /**
     * Model definition of a Concord node placement in [PlacementAssignment].
     *
     * @property[node]
     *   identifier of the Concord node replica that is placed.
     * @property[site]
     *   orchestration site used as deployment target for the node corresponding to the slot.
     */
    message Entry {
        ConcordNodeIdentifier node = 1;
        OrchestrationSiteIdentifier site = 2;
        OrchestrationSiteInfo site_info = 3;
    }

    repeated Entry entries = 1 [packed=false];
}

/**
 * Model definition of cluster deployment specification.
 *
 * @property[cluster_size]
 *   size of the cluster to deploy.
 * @property[model]
 *   versioned Concord model to use for nodes in the cluster.
 * @property[placement]
 *   cluster placement specification.
 */
message DeploymentSpecification {
    uint32 cluster_size = 1 [deprecated=true];
    ConcordModelSpecification model = 2;
    PlacementSpecification placement = 3;
    vmware.blockchain.ethereum.type.Genesis genesis = 4;
    string consortium = 5;
    Properties properties = 6;
}

/**
 * Denote the identifier of a deployment session.
 *
 */
message DeploymentSessionIdentifier {
    string id = 1;
}

/**
 * Model definition of a deployment session.
 *
 * @property[id]
 *   identifier for this deployment session.
 * @property[specification]
 *   deployment specification used to carry out the operation associated with this session.
 * @property[cluster]
 *   identifier of the Concord cluster associated with this deployment session.
 * @property[assignment]
 *   reified node placement derived from deployment specification.
 * @property[complete]
 *   terminal indicator for the deployment session (whether successful or failure).
 * @property[events]
 *   deployment events occurred in this deployment session.
 */
message DeploymentSession {
    /**
     * Status of a [DeploymentSession].
     */
    enum Status {
        UNKNOWN = 0; // Default value, should not be used.
        ACTIVE = 1; // Session is still on-going and has not reached final state.
        SUCCESS = 2; // Session has completed without error.
        FAILURE = 3; // Session has completed with error.
    }

    DeploymentSessionIdentifier id = 1;
    DeploymentSpecification specification = 2;
    ConcordClusterIdentifier cluster = 3;
    PlacementAssignment assignment = 4;
    Status status = 5;
    repeated DeploymentSessionEvent events = 6 [packed=false];
}

/**
 * Model definition for events pertaining to a [DeploymentSession].
 *
 * @property[header]
 *   message header.
 * @property[type]
 *   type of event.
 * @property[session]
 *   identifier for the cluster deployment session.
 * @property[node]
 *   Concord node information for node-related events.
 * @property[cluster]
 *   Concord cluster information for the created cluster resource.
 */
message DeploymentSessionEvent {
    /**
     * Type of [DeploymentSessionEvent] emitted.
     */
    enum Type {
        NOOP = 0; // Default value, should not be used.
        ACKNOWLEDGED = 1; // Request acknowledged (session associated with [deployment] is recorded).
        COMPLETED = 2; // Session completed (plan associated with [deployment] is marked complete).
        RESOURCE = 3; // Resource provisioned event. (INTERNAL USE FOR INFRASTRUCTURE MANAGEMENT)
        NODE_DEPLOYED = 4; // Node specified by [node] is deployed.
        NODE_STATUS = 5; // Status update for a node specified in [node_status].
        CLUSTER_DEPLOYED = 6; // Cluster specified by [cluster] is fully deployed.
        RESOURCE_DEPROVISIONING = 7; // Cluster specified is deprovisioned
    }

    Type type = 1;
    DeploymentSessionIdentifier session = 2;
    DeploymentSession.Status status = 3; /* type == ACKNOWLEDGED | COMPLETED */
    ProvisionedResource resource = 4; /* type == RESOURCE | RESOURCE_DEPROVISIONING */
    ConcordNode node = 5 [deprecated = true]; /* type == NODE_DEPLOYED */
    ConcordNodeStatus node_status = 6; /* type == NODE_STATUS */
    ConcordCluster cluster = 7; /* type == CLUSTER_DEPLOYED */
    Metadata metadata = 8;
}

/**
 * Model definition for a resource provisioned from an orchestration site.
 *
 * @property[name]
 *   name of the resource.
 * @property[site]
 *   identifier of the hosting orchestration site.
 * @property[cluster]
 *   identifier of the Concord cluster that the resource is provisioned for.
 * @property[node]
 *   identifier of the Concord node that the resource is provisioned for.
 */
message ProvisionedResource {
    enum Type {
        GENERIC = 0; // Default value, denoting an unspecified resource type.
        COMPUTE_RESOURCE = 1; // Compute resource (e.g. VM, kubernetes POD).
        NETWORK_RESOURCE = 2; // Network resource (e.g. IP address).
        NETWORK_ALLOCATION = 3; // Network allocation (e.g. NAT rules, kubernetes cluster IP).
    }

    Type type = 1;
    string name = 2;
    OrchestrationSiteIdentifier site = 3;
    ConcordClusterIdentifier cluster = 4;
    ConcordNodeIdentifier node = 5;
}

/**
 * Request definition for operation to create a Concord cluster.
 *
 * @property[header]
 *   message header.
 * @property[specification]
 *   cluster deployment specification.
 */
message CreateClusterRequest {
    MessageHeader header = 1;
    DeploymentSpecification specification = 2;
}

/**
 * Request definition for operation to retrieve [DeploymentEvent]s related to a deployment session.
 *
 * @property[header]
 *   message header.
 * @property[session]
 *   identifier for the cluster deployment session.
 */
message StreamClusterDeploymentSessionEventRequest {
    MessageHeader header = 1;
    DeploymentSessionIdentifier session = 2;
}

/**
 * This is a default empty request to stream all events of an ongoing session
 * @property[header]
 *   message header.
 */
message StreamAllClusterDeploymentSessionEventRequest {
    MessageHeader header = 1;
}

/**
 * Request definition for operation to update a completed deployment session.
 *
 * @property[header]
 *   message header.
 * @property[session]
 *   identifier for the cluster deployment session.
 */
message UpdateDeploymentSessionRequest {
    enum Action {
        NOOP = 0;
        DEPROVISION_ALL = 1;
    }
    MessageHeader header = 1;
    Action action = 2;
    DeploymentSessionIdentifier session = 3;
}

/**
* Placeholder for any response update action might give out
*/
message UpdateDeploymentSessionResponse {
    MessageHeader header = 1;
}

/**
 * Model definition for provisioning server configuration settings.
 *
 * @property[port]
 *   port number to use for server instance.
 * @property[transport_security]
 *   transport security setting.
 * @property[container_registry]
 *   information containing endpoint of registry for docker images to be used as default
 * @property[allocation_server]
 *   information containing the endpoint for ipam to be used as default
 */
message ProvisioningServerConfiguration {
    int32 port = 1;
    TransportSecurity transport_security = 2;
    Endpoint config_service = 3;
    Endpoint container_registry = 4;
    Endpoint allocation_server = 5;
    Endpoint config_service_rest = 6;
}

/* [END messages] */

/* [START services] */
/**
 * Service definition pertaining to operations on Concord cluster provisioning.
 */
service ProvisioningService {
    /**
     * Operation to create a cluster based on a [CreateClusterRequest].
     */
    rpc CreateCluster (CreateClusterRequest) returns (DeploymentSessionIdentifier) {};

    /**
     * Operation to retrieve [DeploymentSessionEvent]s of a [DeploymentSession] as a stream.
     */
    rpc StreamClusterDeploymentSessionEvents (StreamClusterDeploymentSessionEventRequest)
    returns (stream DeploymentSessionEvent) {};

    /**
     * Operation to retrieve all [DeploymentSessionEvent] as a stream for an ongoing session.
     * FIXME: Keeping this as a separate API so that the response type (as implemented)for
     * StreamClusterDeploymentSessionEvents is homogenous. This is due for removal once
     * StreamClusterDeploymentSessionEvents also returns a stream instead.
     */
    rpc StreamAllClusterDeploymentSessionEvents (StreamAllClusterDeploymentSessionEventRequest)
    returns (stream DeploymentSessionEvent) {};

    /**
    * Operation to deprovision cluster based on a [DeprovisionClusterRequest]
    */
    rpc UpdateDeploymentSession (UpdateDeploymentSessionRequest)
    returns (UpdateDeploymentSessionResponse) {};
}
/* [END services] */
