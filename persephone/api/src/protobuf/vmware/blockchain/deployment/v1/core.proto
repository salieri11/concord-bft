/* [START declaration] */
syntax = "proto3";
package vmware.blockchain.deployment.v1;
/* [END declaration] */

option go_package = "vmware.com/blockchain/deployment/v1;deployment";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.v1";
option java_multiple_files = true;
/* [END java_declaration] */

/**
 * Common message header for RPC request / response messages.
 *
 * @property[id]
 *   message identifier.
 *   Note: If specified for request, it is the client-supplied token to de-duplicate request(s).
 *         If specified on response, it is reflecting the token specified on request.
 */
message MessageHeader {
    string id = 1;
}

/**
 * Model definition of a public key.
 *
 * @property[algorithm]
 *   algorithm used for the key.
 * @property[base64_encoding]
 *   value of the key in base64 encoding.
 */
message PublicKey {
    string algorithm = 1;
    string base64_encoding = 2;
}

/**
 * Model definition of a service endpoint.
 *
 * @param[address]
 *   address of the server endpoint URI as a string.
 * @param[credential]
 *   credential to present to the endpoint upon connection.
 * @param[transport_security]
 *   transport security setting to use for endpoint connection.
 */
message Endpoint {
    string address = 1;
    Credential credential = 2;
    TransportSecurity transport_security = 3;
}

/**
 * Model definition of a credential.
 *
 * @property[type]
 *   type of the credential.
 * @property[password_credential]
 *   content of password-based credential.
 * @property[token_credential]
 *   content of token-based credential.
 */
message Credential {
    enum Type {
        NONE = 0;
        PASSWORD = 1;
        BEARER = 2;
    }

    Type type = 1;
    PasswordCredential password_credential = 2;
    BearerTokenCredential token_credential = 3;
}

/**
 * Denote a basic authentication credential.
 *
 * @property[username]
 *   login username to present to the endpoint.
 * @property[password]
 *   login password to present to the endpoint.
 */
message PasswordCredential {
    string username = 1;
    string password = 2;
}

/**
 * Denote a token authentication credential.
 *
 * @property[token]
 *   token value to present to the endpoint.
 */
message BearerTokenCredential {
    string token = 1;
}

/**
 * Denote a transport security configuration setting.
 *
 * @property[type]
 *   type of transport security specified.
 * @property[trusted_certificates_url]
 *   file URL for trusted certificates (PEM format).
 * @property[certificate_url]
 *   file URL for local entity's (client or server) certificate (PEM format).
 * @property[private_key_url]
 *   file URL for local entity's (client or server) private key (PEM format).
 */
message TransportSecurity {
    enum Type {
        NONE = 0;
        TLSv1_2 = 1;
    }

    Type type = 1;
    oneof trusted_certificates {
        string trusted_certificates_url = 2;
        string trusted_certificates_data = 3;
    };
    oneof certificate {
        string certificate_url = 4;
        string certificate_data = 5;
    }
    oneof private_key {
        string private_key_url = 6;
        string private_key_data = 7;
    }
}

/**
 * Model definition of a Outbound proxy.
 *
 */
message OutboundProxyInfo {
    string http_host = 1;
    int32 http_port = 2;
    string https_host = 3;
    int32 https_port = 4;
}

/**
 * Model definition for log managements.
 *
 * @property[destination]
 *   destination of the logs.
 * @property[endpoint]
 *   endpoint information.
 * @property[log_insight_agent_id]
 *   if log insight has generated an agent id for use.
 */
message LogManagement {
    enum Type {
        LOG_INTELLIGENCE = 0;
        LOG_INSIGHT = 1;
    }

    Type destination = 1;
    Endpoint endpoint = 2;
    uint32 log_insight_agent_id = 3;
}

/**
 * Enum supporting properties per node
 * TODO: Duplicate alert : some enums are duplicate of DeploymentAttributes, need cleanup from here.
 */
message NodeProperty {
    enum Name {
        GENERIC = 0;
        COMMITTERS = 1;
        BLOCKCHAIN_ID = 2;
        NODE_ID = 3;
        CLIENT_GROUP_ID = 4;
        LOGGING_CONFIG = 5;
        CONSORTIUM_ID = 6;
        GENESIS = 7;
        WAVEFRONT_URL = 8;
        WAVEFRONT_TOKEN = 9;
        WAVEFRONT_PROXY_HOST = 10;
        WAVEFRONT_PROXY_PORT = 11;
        WAVEFRONT_PROXY_USER = 12;
        WAVEFRONT_PROXY_PASSWORD = 13;
        CLIENT_AUTH_JWT = 14;
        NODE_IP = 15;
        ELASTICSEARCH_URL = 16;
        ELASTICSEARCH_USER = 17;
        ELASTICSEARCH_PWD = 18;
        VM_IP = 19;
        CLIENT_GROUP_NAME = 20;
        TLS_PEM = 21;
        TLS_CRT = 22;
        TLS_CACRT = 23;
        TELEGRAF_USERNAME = 24;
        TELEGRAF_PASSWORD = 25;
    }

    Name name = 1;
    map<int32, string> value = 2;
}

/**
 * Raw bag of properties.
 * This structure can be used during initial development phase when all parameters are not known.
 */
message Properties {
    map<string, string> values = 1 [packed=false];
}

enum BlockchainType {
    DAML = 0;
    ETHEREUM = 1;
    HLF = 2;
}

enum NodeType {
    REPLICA = 0;
    CLIENT = 1;
    OPERATOR = 2;
    READ_REPLICA = 3;
}
