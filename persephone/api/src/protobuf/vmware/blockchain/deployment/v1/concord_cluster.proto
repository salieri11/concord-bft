/* [START declaration] */
syntax = "proto3";
package vmware.blockchain.deployment.v1;

import "vmware/blockchain/deployment/v1/concord_model.proto";
import "vmware/blockchain/deployment/v1/orchestration.proto";
/* [END declaration] */

option go_package = "vmware.com/blockchain/deployment/v1;deployment";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.v1";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Identifier of a [ConcordNode].
 *
 */
message ConcordNodeIdentifier {
    string id = 1;
}

/**
 * Model definition of information pertaining to a [ConcordNode].
 *
 * @property[model]
 *   identifier of the Concord model specification deployed.
 * @property[ipv4_addresses]
 *   map of network interface name to address as perceived by the node.
 */
message ConcordNodeInfo {
    ConcordModelIdentifier model = 1;
    map<string, int32> ipv4_addresses = 2;
    ConcordModelSpecification.BlockchainType blockchain_type = 3;
    string node_password = 4;
}

/**
 * Model definition of an endpoint exposed by a [ConcordNode]
 *
 * @property[url]
 *   reachable network URL address for the endpoint.
 * @property[certificate]
 *   certificate used by the endpoint.
 */
message ConcordNodeEndpoint {
    string url = 1;
    string certificate = 2;
}

/**
 * Model definition of information on the host environment of a [ConcordNode].
 *
 * @property[site]
 *   identifier of the orchestration site hosting the member.
 * @property[endpoints]
 *   map of endpoint name to [ConcordNodeEndpoint] exposed by the node.
 * @property[ipv4_address_map]
 *   map of IPv4 public address to node's network address.
 */
message ConcordNodeHostInfo {
    OrchestrationSiteIdentifier site = 1;
    map<int32, int32> ipv4_address_map = 10;
    map<string, ConcordNodeEndpoint> endpoints = 11;
}

/**
 * Model definition of information pertaining to [ConcordNode]'s configuration.
 *
 * @property[s3_storage]
 *   URL endpoint to S3-compatible storage.
 */
message ConcordNodeConfiguration {
    string s3_storage = 1;
}

/**
 * Model definition of a deployed Concord node instance.
 *
 * @property[id]
 *   identifier of the Concord node.
 * @property[info]
 *   information pertaining to the Concord node instance.
 * @property[host_info]
 *   information pertaining to the Concord node instance's host environment.
 */
message ConcordNode {
    ConcordNodeIdentifier id = 1;
    ConcordNodeInfo info = 2;
    ConcordNodeHostInfo host_info = 3;
}

/**
 * Status definition of a deployed Concord node instance.
 *
 * @property[id]
 *   identifier of the Concord node.
 * @property[status]
 *   status of the Concord node.
 */
message ConcordNodeStatus {
    /**
     * Enumeration of potential status of a [ConcordNode].
     */
    enum Status {
        UNKNOWN = 0; // Status is unknown.
        ACTIVE = 1; // Node is in active state.
        INACTIVE = 2; // Node is in inactive state.
        DEPLOYED = 3; // Node instance is deployed but not yet configured.
    }

    ConcordNodeIdentifier id = 1;
    Status status = 2;
}

/**
 * Identifier of an [ConcordCluster].
 */
message ConcordClusterIdentifier {
    string id = 1;
}

/**
 * Model definition of information pertaining to a [ConcordCluster].
 *
 * @property[nodes]
 *   list of Concord node members in the cluster.
 */
message ConcordClusterInfo {
    repeated ConcordNode members = 1 [packed = false];
}

/**
 * Model definition of a deployed Concord cluster.
 *
 * @property[id]
 *   identifier of the Concord cluster.
 * @property[info]
 *   information pertaining to the Concord cluster.
 */
message ConcordCluster {
    ConcordClusterIdentifier id = 1;
    ConcordClusterInfo info = 2;
}
/* [END messages] */
