/* [START declaration] */
syntax = "proto3";
package vmware.blockchain.deployment.v1;
/* [END declaration] */

option go_package = "vmware.com/blockchain/deployment/v1;deployment";

/* [START java_declaration] */
option java_package = "com.vmware.blockchain.deployment.v1";
option java_multiple_files = true;
/* [END java_declaration] */

/* [START messages] */
/**
 * Model definition of a component within a deployment of Concord instance.
 *
 * @property[type]
 *   type of the component.
 * @property[name]
 *   name of the component.
 */
message ConcordComponent {
    /**
     * Denote the types of components that can be installed in a Concord deployment instance.
     */
    enum Type {
        INVALID = 0;
        CONTAINER_IMAGE = 1; // Container image retrievable from a container registry.
    }

    /**
     * Denote the types of component service functions.
     *
     * Note: Well-known service types are explicitly defined whereas a specific Concord model *may*
     * declare additional [ConcordComponent] that does not have a well-known service type, but can
     * nevertheless be deployed in a context-unaware manner provided that the component type and
     * name specifies a reachable artifact.
     */
    enum ServiceType {
        GENERIC = 0; // Service function is unspecified. Useful only to convey information.
        CONCORD = 1;
        ETHEREUM_API = 2;
        DAML_CONCORD = 3;
        DAML_LEDGER_API = 4;
        DAML_EXECUTION_ENGINE = 5;
        DAML_INDEX_DB = 6;
        HLF_CONCORD = 7 [deprecated = true];
        HLF_TOOLS = 8 [deprecated = true];
        HLF_PEER = 9 [deprecated = true];
        HLF_ORDERER = 10 [deprecated = true];
        LOGGING = 11;
        WAVEFRONT_PROXY = 12;
        JAEGER_AGENT = 13;
        TELEGRAF = 14;
        CONCORD_OPERATOR = 15;
    }

    Type type = 1;
    ServiceType service_type = 2;
    string name = 3;
    ContainerSpecification container_specification = 4;
}

/**
 * Identifier of a [ConcordModel].
 *
 */
message ConcordModelIdentifier {
    string id = 1;
}

/**
 * Model definition of potential parameterization of a container-based component.
 *
 * @param[name]
 *   name of the container.
 * @param[ports]
 *   container port to host ports binding.
 * @param[volumes]
 *   container volume mount-point bindings.
 * @param[environments]
 *   environment variable bindings to should be set in the container environment.
 */
message ContainerSpecification {

    /**
     * Model definition of a host target or container volume to container mount path.
     *
     * @param[source]
     *   host mount point or container volume name.
     * @param[destination]
     *   container volume mount path.
     * @param[read_only]
     *   whether the mounted path should be read-only.
     */
    message VolumeBinding {
        string source = 1;
        string destination = 2;
        bool read_only = 3;
    }

    /**
     * Model definition of a container port that can be bound to [HostPort] targets.
     *
     * @param[protocol]
     *   protocol of the L4 traffic (TCP, UDP).
     * @param[port]
     *   container port to be bound.
     */
    message ContainerPort {
        enum Protocol {
            TCP = 0; // Default to TCP according to specification.
            UDP = 1;
        }

        Protocol protocol = 1;
        int32 port = 2;
    }

    /**
     * Model definition of a host port that can be bound to a [ContainerPort].
     *
     * @param[ip]
     *   host IP to be bound.
     * @param[port]
     *   host port to be bound.
     */
    message HostPort {
        string ip = 1;
        int32 port = 2;
    }

    /**
     * Model definition of a binding between a [ContainerPort] to list of [HostPort]s.
     *
     * @param[container_port]
     *   container port to be bound.
     * @param[host_ports]
     *   list of host ports to be bound.
     */
    message PortBinding {
        ContainerPort container_port = 1;
        repeated HostPort host_ports = 2 [packed=false];
    }

    string name = 1;
    repeated PortBinding ports = 2 [packed=false];
    repeated VolumeBinding volumes = 3 [packed=false];
    repeated string environments = 4;
}

/**
 * Model definition of a versioned Concord node template specification.
 *
 * @property[version]
 *   version of the model.
 * @property[template]
 *   name of the template base entity to use as housing.
 *
 *   Note: Deployment target (e.g. denoted instance of [OrchestrationSite]) is expected to
 *   translate this value into template entity to be used internally for deployment workflow.
 * @property[components]
 *   Positionally ordered list of components to be deployed within a deployment unit.
 *
 *   Note: Orchestration engine may utilize the sequence order during deployment workflow.
 * @property[blockchain_type]
 *   Type of blockchain network.
 * @property[node_type]
 *   If applicable, determines the characteristic of the nodes in the blockchain.
 */
message ConcordModelSpecification {

    /* TODO: dupe alert::BlockchainType/NodeType could be removed in favor of core.proto */
    enum BlockchainType {
        ETHEREUM = 0;
        DAML = 1;
        HLF = 2;
    }

    enum NodeType {
        NONE = 0;
        DAML_COMMITTER = 1;
        DAML_PARTICIPANT = 2;
        READ_REPLICA = 3;
    }

    string version = 1;
    string template = 2;
    repeated ConcordComponent components = 3 [packed=false];
    BlockchainType blockchain_type = 4;
    NodeType node_type = 5;
}
/* [END messages] */
