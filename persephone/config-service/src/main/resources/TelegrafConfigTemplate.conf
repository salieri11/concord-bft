# Global tags can be specified here in key="value" format.
[global_tags]
  blockchain = "$BLOCKCHAIN_ID"
  consortium = "$CONSORTIUM_ID"
  vm_ip = "$REPLICA"
  vm_type = "$VMTYPE"
  source = "$BLOCKCHAIN_ID"

# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true

  metric_batch_size = 1000

  metric_buffer_limit = 10000

  collection_jitter = "0s"

  flush_interval = "10s"
  flush_jitter = "0s"

  precision = ""

 ## Override default hostname, if empty use os.Hostname()
   hostname = ""
   omit_hostname = false

# # Configuration for Wavefront server to send metrics to
[[outputs.wavefront]]
   host = "wavefront-proxy"
   port = 2878
   prefix = "vmware.blockchain."

# Telegraf pull metrics configuration
$ENABLE_TELEGRAF_PULL[[outputs.prometheus_client]]
$ENABLE_TELEGRAF_PULL   ## Address to listen on
$ENABLE_TELEGRAF_PULL   listen = ":9273"

$ENABLE_TELEGRAF_PULL   ## Use HTTP Basic Authentication.
$ENABLE_TELEGRAF_PULL   basic_username = "$TELEGRAF_USERNAME"
$ENABLE_TELEGRAF_PULL   basic_password = "$TELEGRAF_PASSWORD"

$ENABLE_TELEGRAF_PULL   ## Path to publish the metrics on.
$ENABLE_TELEGRAF_PULL   path = "/metrics"

$ENABLE_TELEGRAF_PULL   ## enable TLS with the given certificate if provided by users
$ENABLE_TELEGRAF_PULL   $ENABLE_TELEGRAF_TLS tls_cert = "/config/telegraf/certs/prometheus_client/telegraf.crt"
$ENABLE_TELEGRAF_PULL   $ENABLE_TELEGRAF_TLS tls_key = "/config/telegraf/certs/prometheus_client/telegraf.key"

# Read metrics about cpu usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.docker]]
  ## Docker Endpoint
  ##   To use TCP, set endpoint = "tcp://[ip]:[port]"
  ##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
  endpoint = "unix:///var/run/docker.sock"

  ## Set to true to collect Swarm metrics(desired_replicas, running_replicas)
  gather_services = false

  ## Only collect metrics for these containers, collect all if empty
  container_names = []

  ## Containers to include and exclude. Globs accepted.
  ## Note that an empty array for both will include all containers
  container_name_include = []
  container_name_exclude = []

  ## Container states to include and exclude. Globs accepted.
  ## When empty only containers in the "running" state will be captured.
  container_state_include = ["created", "restarting", "running", "removing", "paused", "exited", "dead"]
  # container_state_exclude = []

  ## Timeout for docker list, info, and stats commands
  timeout = "5s"

  ## Whether to report for each container per-device blkio (8:0, 8:1...) and
  ## network (eth0, eth1, ...) stats or not
  perdevice = true
  ## Whether to report for each container total blkio and network stats or not
  total = false

  ## docker labels to include and exclude as tags.  Globs accepted.
  ## Note that an empty array for both will include all labels as tags
  docker_label_include = []
  docker_label_exclude = []

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

[[inputs.net]]

[[inputs.net_response]]
  ## Protocol, must be "tcp" or "udp"
  ## NOTE: because the "udp" protocol does not respond to requests, it requires
  ## a send/expect string pair (see below).
  protocol = "tcp"
  ## Server address (default localhost)
  address = "localhost:80"

#[[inputs.postgresql]]
  #$DBINPUT

[[inputs.prometheus]]
  urls = $URL

# Send epoch time for each node
[[inputs.exec]]
  commands = ["date +%s",]
  timeout='10s'
  name_override="time.epoch"
  data_format="value"
  data_type="long"