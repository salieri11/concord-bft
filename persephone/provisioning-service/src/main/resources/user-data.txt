#!/bin/sh
echo -e "{{vmPassword}}\n{{vmPassword}}" | /bin/passwd

{{networkSetupCommand}}

sed -i 's_/usr/bin/dockerd.*_/usr/bin/dockerd {{dockerDns}} -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock {{registrySecuritySetting}}_g' /lib/systemd/system/docker.service

{{setupOutboundProxy}}
systemctl daemon-reload

mkdir -p /etc/docker
echo '{"log-driver": "json-file", "log-opts": { "max-size": "100m", "max-file": "5"}}' > /etc/docker/daemon.json

systemctl restart docker

# To enable docker on boot.
systemctl enable docker

# Enable time sync
vmware-toolbox-cmd timesync enable

# Partition, format, and mount additional disk, if any
{{diskSetupCommand}}

# Output the node's model specification.
mkdir -p /config/agent
echo '{{agentConfig}}' > /config/agent/config.json
chmod 600 /config/agent/config.json

# Handle Container Registry, if it is self-signed
{{handleSelfSignedContainerReg}}

# Handle Notary Server, if it is self-signed
{{handleSelfSignedNotaryServer}}

# Update guest-info's network information in vSphere.
touch /etc/vmware-tools/tools.conf
printf '[guestinfo]\nprimary-nics=eth*\nexclude-nics=docker*,veth*' > /etc/vmware-tools/tools.conf
/usr/bin/vmware-toolbox-cmd info update network

# Retry logic to pull an image.
retry=0
until [ $retry -ge 3 ]
do
   {{dockerLoginCommand}}
   docker network create -d bridge {{blockchainNetwork}}
   {{setDockerContentTrustServerCommand}}
   {{enableDockerContentTrustCommand}}
   docker run -d --name=agent --restart=always --network={{blockchainNetwork}} -p 127.0.0.1:8546:8546 -v /config:/config -v /var/run/docker.sock:/var/run/docker.sock {{agentImage}} && break
   retry=$[$retry+1]
   sleep 10
done

echo 'done'