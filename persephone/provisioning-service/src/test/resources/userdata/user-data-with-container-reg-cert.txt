#!/bin/sh
echo -e "c0nc0rd\nc0nc0rd" | /bin/passwd

echo -e "[Match]\nName=eth0\n\n[Network]\nAddress=10.0.0.10/24\nGateway=10.0.0.1\nDNS=\nIPv6AcceptRA=false" > /etc/systemd/network/10-eth0-static.network; chmod 644 /etc/systemd/network/10-eth0-static.network; systemctl restart systemd-networkd;

sed -i 's_/usr/bin/dockerd.*_/usr/bin/dockerd --dns  -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock _g' /lib/systemd/system/docker.service


systemctl daemon-reload

mkdir -p /etc/docker
echo '{"log-driver": "json-file", "log-opts": { "max-size": "100m", "max-file": "5"}}' > /etc/docker/daemon.json

systemctl restart docker

# To enable docker on boot.
systemctl enable docker

# Enable time sync
vmware-toolbox-cmd timesync enable

# Partition, format, and mount additional disk, if any


# Output the node's model specification.
mkdir -p /config/agent
echo '{
}' > /config/agent/config.json
chmod 600 /config/agent/config.json

# Handle Container Registry, if it is self-signed
mkdir -p /etc/docker/certs.d/127.0.0.1:443
echo '-----BEGIN CERTIFICATE-----
MIIDhDCCAmwCCQCqJ2ReGXJGSTANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMC
VVMxCzAJBgNVBAgMAkNBMRIwEAYDVQQHDAlTdW5ueXZhbGUxDzANBgNVBAoMBlZN
d2FyZTENMAsGA1UECwwET0NUTzETMBEGA1UEAwwKdm13YXJlLmNvbTEeMBwGCSqG
SIb3DQEJARYPdGVzdEB2bXdhcmUuY29tMB4XDTIwMDgyNDIyMDI0M1oXDTIxMDgy
NDIyMDI0M1owgYMxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJDQTESMBAGA1UEBwwJ
U3Vubnl2YWxlMQ8wDQYDVQQKDAZWTXdhcmUxDTALBgNVBAsMBE9DVE8xEzARBgNV
BAMMCnZtd2FyZS5jb20xHjAcBgkqhkiG9w0BCQEWD3Rlc3RAdm13YXJlLmNvbTCC
ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQ53M+a9Rl2n6uR6+Gl2ErT
MMwXRixfcdQkBaSfnENf4rSLCo/9nbUFzSDI2N7USY1FlmzHeyvopRNmuyCda6Jv
oleleiaHhyrR0FMAUZ8Vz0sI4fMRaRqKBsMJ+QgX4USdmghAkmys7ig5MUJjcU8D
UoQ4LoUDiGARkw0oD6cNWa3pdWVfJ3mvaHuq1OlZfQ3kC1luyklhihPIMGrisuua
49tGBZs3F6n3Ky3hU09I3okKkBtioXTkYz3Bdszt/XMS5HeyrX/nG2NO60RT3OVX
nvdb0bmPSJNmnvSGEzTD8WnA+9Vg13e8xLLA1W6+oFhG6rUD5g5IKnfl6zE8sL0C
AwEAATANBgkqhkiG9w0BAQsFAAOCAQEANb0u4elmBugWqAR9reQRlk66Nx3Velab
NSI8f78WGHMCS4ryG8fwFKwcJ9XlDJZA81FcRDrycvk0qaLgnSWnBrrauDDkGRL4
mJsFnjBIfJkJXDvfp6LYhgubleVj5kiNHCp/Pp9wFnuP7/Q8fgygZrXSiT/tzAQy
Au90vbEzxvpCvbf0lQYcL5M9jFt9D2RxMLWQCbf+PrluXe+leWOiPlrvXY/sYqxW
hlkQfaYjauR4qTbqo9VX4q142tbAsGnq8tmXbAlL+NK12HHZvGjOlsyOUjAbD0Vt
398Vtqg3kiL/IAe1weda08BdTkA/Dj4DKHZQHs2ndKoDVV5icoIXHw==
-----END CERTIFICATE-----' > /etc/docker/certs.d/127.0.0.1:443/ca.crt
chmod 600 /etc/docker/certs.d/127.0.0.1:443/ca.crt

# Handle Notary Server, if it is self-signed


# Update guest-info's network information in vSphere.
touch /etc/vmware-tools/tools.conf
printf '[guestinfo]\nprimary-nics=eth*\nexclude-nics=docker*,veth*' > /etc/vmware-tools/tools.conf
/usr/bin/vmware-toolbox-cmd info update network



# Retry logic to pull an image.
retry=0
until [ $retry -ge 3 ]
do
   docker login https://127.0.0.1:443 -u username -p 'password'
   docker network create -d bridge blockchain-fabric
   export DOCKER_CONTENT_TRUST_SERVER=""
   export DOCKER_CONTENT_TRUST=0
   docker run -d --name=agent --restart=always --network=blockchain-fabric -p 127.0.0.1:8546:8546 -v /config:/config -v /var/run/docker.sock:/var/run/docker.sock 127.0.0.1:443/agent && break
   retry=$[$retry+1]
   sleep 10
done

echo 'done'