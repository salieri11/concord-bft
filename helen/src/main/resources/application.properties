#Configurations file for Helen

#Concord configurations
ConcordAuthorities=localhost:5458,localhost:5459,localhost:5460,localhost:5461
ConnectionPoolSize=10
ConnectionPoolFactor=2
ConnectionPoolWaitTimeoutMs=4000
ReceiveTimeoutMs=40000
ReceiveHeaderSizeBytes=2
ConcordRpcUrls=replica0=https://127.0.0.1:8545/,replica1=https://127.0.0.1:8546/,replica2=https://127.0.0.1:8547/,replica3=https://127.0.0.1:8548/
ConcordRpcCerts=replica0=/config/replica0-cacert.pem,replica1=/config/replica1-cacert.pem,replica2=/config/replica2-cacert.pem,replica3=/config/replica3-cacert.pem

# Ethereum constants are now in java.  They weren't really properties anyway.

#Database related configurations

DB_PROTOCOL=jdbc:postgresql
DB_IP=localhost
DB_PORT=26257
DB_NAME=helen
DB_OPTIONS=sslmode=disable
DB_USER=helen_admin
DB_PASSWORD=VMware!23

# CSP properties
csp.url=https://console.cloud.vmware.com

# Solidity Smart Contract Compiler Service
compilerService.url=http://contract-compiler:3000/api/v1/contracts

# Log Intelligence (LINT) properties
lint.url=https://api.mgmt.cloud.vmware.com
lint.apitoken=${LINT_API_TOKEN:LINT_API_TOKEN}
lint.logging.endpoint=https://data.mgmt.cloud.vmware.com/le-mans/v1/streams/ingestion-pipeline-stream
lint.logging.authbearer=${LINT_AUTHORIZATION_BEARER:LINT_AUTHORIZATION_BEARER}

# Wavefront properties
default.wavefront.endpoint=
default.wavefront.token=

# deployment service
fleet.provisioning.service.url=grpc://persephone-provisioning:9002
fleet.management.service.url=grpc://persephone-fleet:9004

# grpc(s) over TLS between Helen and Persephone/provisioning service.
# To enable grpc+TLS for provisioning service, change the scheme above to "grpcs"
# and provide the service's public key below.
# Persephone/provisioning service's public key location
# provisioning.service.certChain=file:/config/persephone/provisioning/serverCert.pem

# Below 2 configuration properties are required just so that we can start our
# app even when database is not running. Dialect is important here because
# hibernate will try to guess dialect at startup (if not provided) and will
# fail if database is not running
spring.datasource.continueOnError=true

# Database credentials
spring.datasource.url=${DB_PROTOCOL}://${DB_IP}:${DB_PORT}/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# hibernate logger config must be in application.properties since its
# a spring property which internally translates to hibernate logging config
logging.level.org.hibernate=INFO

logging.config=classpath:log4j2.properties

# service ID and name.  This will really be set by CSP at some point.
vmbc.service.id=9eaa68a7-f682-44d8-83ea-43244e3d88dd
vmbc.service.name=Helen
vmbc.default.blockchain=true
# set to true to use csp as authorization
vmbc.auth.csp=false
# These need to be stored in vault
vmbc.client.id=oath-client
vmbc.client.secret=oath-secret
# csrf protection set to true
vmbc.cookie.secure= true

# session management information
# use jdbc with a postgres database to store sessionsl
# schema information is given in V2__session_schema.sql in table SPRING_SESSION
spring.session.store-type=jdbc
spring.session.jdbc.table-name=SPRING_SESSION

# actuator endpoints.  Health check details only when system admin.
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.endpoints.web.base-path=/api/management
management.endpoint.health.show-details=when_authorized
management.endpoint.health.roles=vmbc-system:admin
management.endpoints.web.exposure.include=*
management.server.port=9081

# wavefront metrics
# management.metrics.export.wavefront.api-token=YOUR_API_TOKEN

# Allow flyway to init an existing DB.
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration,filesystem:/config/app/db/migration

#client count validation
vmbc.client.number = 10

# replica count validation
vmbc.replica.number = {4,7,10}