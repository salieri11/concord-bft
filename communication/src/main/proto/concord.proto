// Copyright 2018 - 2019 VMware, all rights reserved
//
// Concord's external interface definition.

syntax = "proto2";

package com.vmware.concord;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ConcordRequest {
   optional ProtocolRequest protocol_request = 1;
   optional PeerRequest peer_request = 2;
   repeated EthRequest eth_request = 3;
   optional BlockListRequest block_list_request = 4;
   optional BlockRequest block_request = 5;
   optional TransactionRequest transaction_request = 6;
   optional TransactionListRequest transaction_list_request = 7;
   optional LogsRequest logs_request = 8;
   optional TimeRequest time_request = 9;
   repeated HlfRequest hlf_request = 10;
   optional DamlRequest daml_request = 11;
   optional ReconfigurationRequest reconfiguration_request = 12;
   optional bytes trace_context = 13;
   optional LatestPrunableBlockRequest latest_prunable_block_request = 14;
   optional PruneRequest prune_request = 15;
   optional PreExecutionResult pre_execution_result = 16;
   optional TeeRequest tee_request = 17;
   optional PerfRequest perf_request = 18;
   optional ReconfigurationSmRequest reconfiguration_sm_request = 19;

   // 18-2045 open for definition
   // Likely: metrics/stats, non-eth blockchain, other admin

   optional TestRequest test_request = 2046;
}

message ConcordResponse {
   optional ProtocolResponse protocol_response = 1;
   optional PeerResponse peer_response = 2;
   repeated EthResponse eth_response = 3;
   optional BlockListResponse block_list_response = 4;
   optional BlockResponse block_response = 5;
   optional TransactionResponse transaction_response = 6;
   optional TransactionListResponse transaction_list_response = 7;
   optional LogsResponse logs_response = 8;
   optional TimeResponse time_response = 9;
   repeated HlfResponse hlf_response = 10;
   optional DamlResponse daml_response = 11;
   optional ReconfigurationResponse reconfiguration_response = 12;
   // 13: trace_context has no response
   optional LatestPrunableBlockResponse latest_prunable_block_response = 14;
   optional PruneResponse prune_response = 15;
   optional PreExecutionResult pre_execution_result = 16;
   optional TeeResponse tee_response = 17;
   optional PerfResponse perf_response = 18;
   optional ReconfigurationSmResponse reconfiguration_sm_response = 19;

   // 18-2045 open for definition
   optional TestResponse test_response = 2046;
   repeated ErrorResponse error_response = 2047;
}

// ----------------------------------------------------------------------------
// All message definitions below this comment are sent/received within a
// ConcordRequest/ConcordResponse message as defined above.
//
// The following list of message definitions is ordered alphabetically.
// ----------------------------------------------------------------------------

message BlockBrief {
   optional int64 number = 1;
   optional bytes hash = 2;
}

message BlockListRequest {
   optional int64 latest = 1;
   optional int64 count = 2;
}

message BlockListResponse {
   repeated BlockBrief block = 1;
}

message BlockRequest {
   optional int64 number = 1;
   optional bytes hash = 2;
}

message BlockResponse {
   optional int64 number = 1;
   optional bytes hash = 2;
   optional bytes parent_hash = 3;
   optional bytes nonce = 4;
   optional int64 size = 5;
   repeated TransactionResponse transaction = 6;
   optional int64 timestamp = 7;
   optional int64 gas_limit = 8;
   optional int64 gas_used = 9;
}

message DamlRequest {
   required bytes command = 1;
}

message DamlResponse {
   required bytes command_reply = 1;
}

// TEE refers to the Test Execution Engine.
message TeeRequest {
   optional string tee_input = 1;
   optional SkvbcRequest skvbc_request = 2;
   optional WriteBlockRequest wb_request = 3;
}

message TeeResponse {
   optional string tee_output = 1;
   optional SkvbcResponse skvbc_response = 2;
}

message WriteBlockRequest {
   optional bytes kvdata_content = 1;
} 

message SkvbcRequest {
   optional bytes request_content = 1;
}

message SkvbcResponse {
   optional bytes response_content = 1;
}

message PerfRequest {
  enum PerfRequestType {
    Init =1;
    Write = 2;
    Clean = 3;
  }

  optional PerfRequestType type = 1;
  optional bytes request_content = 2;
}

message PerfResponse {
   optional bytes response_content = 1;
}

message ErrorResponse {
   optional string description = 1;
}

message EthRequest {

   enum EthMethod {
      SEND_TX = 1;
      // SEND_TX_RAW is removed
      // GET_TX_RECEIPT is removed
      // instead directly call TransactionRequest
      GET_STORAGE_AT = 4;
      CALL_CONTRACT = 5;
      NEW_ACCOUNT = 6;
      // FILTER_REQUEST (7) is removed
      GET_CODE = 8;
      BLOCK_NUMBER = 9;
      GET_TX_COUNT = 10;
      GET_BALANCE = 11;
   }

   optional EthMethod method = 1;
   optional int64 id = 2;
   optional bytes addr_to = 3;
   optional bytes addr_from = 4;
   optional bytes value = 5;
   optional bytes data = 6;
   optional bool create = 7;
   // filter_request (8) is removed
   optional int64 nonce = 9;
   optional int64 gas_price = 10;
   optional int64 gas = 11;
   optional int64 sig_v = 12;
   optional bytes sig_r = 13;
   optional bytes sig_s = 14;
   optional int64 timestamp = 15;    // Internal only!
   optional int64 block_number = 16; // for the default block parameter
   optional int64 gas_limit = 17;    // Internal only!
}

message EthResponse {
   optional int64 id = 1;
   optional bytes data = 2;
   optional bytes contract_address = 3;
   optional int32 status = 4;
   // filter_response (5) is removed
}

message HlfRequest {
  enum HlfMethod {
    INSTALL = 1;
    UPGRADE = 2;
    INVOKE = 3;
    QUERY = 4;
  }

  optional HlfMethod method = 1;
  optional string chain_id = 2;
  optional string chaincode_name = 3;
  optional string input = 4;
  optional string version = 5;
  optional bytes chaincode_source_bytes = 6;
  // 'path' indicates the path to store chaincode
  // if method was INSTALL or UPGRADE
  optional string path = 7;
  // type indicates the chaincode type, could be
  // go, js and java
  optional string type = 8;
}

message HlfResponse {
  // transaction id
  optional string id = 1;
  optional string data = 2;
  optional int32 status = 3;
}

message LatestPrunableBlock {
   optional uint64 replica = 1;
   optional uint64 block_id = 2;
   // signature of prior fields by 'replica'
   optional bytes signature = 3;
}

message LatestPrunableBlockRequest {}

message LatestPrunableBlockResponse {
   repeated LatestPrunableBlock block = 1;
}

message LogResponse {
   optional bytes contract_address = 1;
   repeated bytes topic = 2;
   optional bytes data = 3;
   optional bytes block_hash = 4;
   optional int64 block_number = 5;
   optional uint64 log_index = 6;
   optional bytes transaction_hash = 7;
   optional uint64 transaction_index = 8;
   optional uint64 transaction_log_index = 9;
}

message LogsRequest {
   optional int64 from_block = 1;
   optional int64 to_block = 2;
   optional bytes contract_address = 3;
   repeated bytes topic = 4;
   optional bytes block_hash = 5;
}

message LogsResponse {
   repeated LogResponse log = 1;
}

message Peer {
   optional string address = 1;
   optional string hostname = 2;
   optional int64 millis_since_last_message = 3;
   optional int64 millis_since_last_message_threshold = 4;

   // putting this one late so it doesn't consume a useful address
   // while we're figuring out what format it should actually have
   optional string status = 2047;
}

message PeerRequest {
   optional bool return_peers = 1;
   repeated Peer add_peer = 2;
   repeated Peer remove_peer = 3;
}

message PeerResponse {
   repeated Peer peer = 1;
}

message PreExecutionResult {
   optional int64 read_set_version = 1;
   optional ReadSet read_set = 2;
   optional WriteSet write_set = 3;
   optional string request_correlation_id = 4;
   optional google.protobuf.Timestamp max_record_time = 5;
   optional WriteSet conflict_write_set = 6;
   optional WriteSet timeout_write_set = 7;
}

message ReadSet {
   repeated bytes keys = 1;
}

message WriteSet {
   repeated KeyValuePair kv_writes = 1;
}

message KeyValuePair {
   required bytes key = 1;
   required bytes value = 2;
}

message ProtocolRequest {
   optional int32 client_version = 1;
   // TODO: probably some auth in here too
}

message ProtocolResponse {
   optional int32 server_version = 1;
   optional int64 net_version = 2;
}

message PruneRequest {
   optional uint64 sender = 1;
   // N out of N latest prunable block replies signed by replicas
   repeated LatestPrunableBlock latest_prunable_block = 2;
   // signature of prior fields by 'sender'
   optional bytes signature = 3;
}

message PruneResponse {
   optional bool ok = 1;
   optional string error_msg = 2;
}

message ReconfigurationSmRequest {
   enum PluginId {
      MOCK = 0;
   }
   required PluginId pluginId = 1;
   optional bytes command = 2;
   optional bytes signature = 3;
}

message ReconfigurationSmResponse {
   optional bool success = 1;
   optional bytes additionalData = 2;
}

message ReconfigureTimePusherPeriodRequest {
   optional google.protobuf.Duration time_pusher_period_ms = 1;
}

// TODO: There should be some form of authentication showing that a
//       ReconfigurationRequest actually originated from an entity with the
//       authority to reconfigure the node the request is sent to.
message ReconfigurationRequest {
   optional ReconfigureTimePusherPeriodRequest
      reconfigure_time_pusher_period = 1;
}

message ReconfigurationResponse {
   optional bool successful = 1;
}

message TestRequest {
   optional string echo = 1;
}

message TestResponse {
   optional string echo = 1;
}

message TimeRequest {
   optional TimeSample sample = 1;
   optional bool return_summary = 2;
   optional bool return_samples = 3;
}

message TimeResponse {
   optional google.protobuf.Timestamp summary = 1;
   repeated TimeSample sample = 2;
}

message TimeSample {
   optional bytes source = 1;
   optional google.protobuf.Timestamp time = 2;
   optional bytes signature = 3;
}

message TransactionListRequest {
   optional bytes latest = 1;
   optional int64 count = 2;
}

message TransactionListResponse {
   repeated TransactionResponse transaction = 1;
   optional bytes next = 2;
}

message TransactionRequest {
   optional bytes hash = 1;
}

message TransactionResponse {
   optional bytes hash = 1;
   optional bytes from = 2;
   optional bytes to = 3;
   optional bytes value = 4;
   optional bytes input = 5;
   optional bytes block_hash = 6;
   optional int64 block_number = 7;
   optional int64 transactionIndex = 8;
   optional int64 nonce = 9;
   optional int32 status = 10;
   optional bytes contract_address = 11;
   repeated LogResponse log = 12;
   optional uint64 gas_price = 13;
   optional uint64 gas_limit = 14;
   optional uint64 sig_v = 15;
   optional bytes sig_r = 16;
   optional bytes sig_s = 17;
   optional uint64 gas_used = 18;
}
