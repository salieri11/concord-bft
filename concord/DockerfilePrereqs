## IMPORTANT: While Dockerfile is meant to be built with the parent of
## this directory as the context, this DockerfilePrereqs is meant to
## be build with this directory (concord) as the context.

## Build image
FROM ubuntu:18.04
LABEL Description="Build environment for concord"

RUN apt-get update && apt-get -y install \
    autoconf \
    automake \
    build-essential \
    clang-7 \
    clang-format-7 \
    curl \
    g++ \
    git \
    libboost1.65-dev \
    libboost-program-options1.65-dev \
    libboost-system1.65-dev \
    libboost-filesystem1.65-dev \
    libboost-thread1.65-dev \
    libbz2-dev \
    libcurl4-openssl-dev \
    libgmp3-dev \
    liblz4-dev \
    libsnappy-dev \
    libzstd1-dev \
    libtool \
    libs3-dev \
    llvm-5.0 \
    llvm-5.0-dev \
    libyaml-cpp0.5v5 \
    libyaml-cpp-dev \
    pkg-config \
    python2.7 \
    python3-pip \
    wget \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/bin/clang-format-7 /usr/bin/clang-format
RUN ln -s /usr/bin/clang-format-diff-7 /usr/bin/clang-format-diff

# Golang for HLF chaincode
WORKDIR /tmp
RUN wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz && \
    tar -C /usr/local -xf go1.11.linux-amd64.tar.gz

# Install CMake 3.16
RUN wget -q -O cmake-linux.sh \
    https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1-Linux-x86_64.sh && \
    sh cmake-linux.sh -- --skip-license --prefix=/usr && \
    rm cmake-linux.sh

WORKDIR /
RUN git clone https://github.com/google/googletest.git && \
    cd /googletest && \
    git checkout e93da23920e5b6887d6a6a291c3a59f83f5b579e
WORKDIR /googletest/_build
RUN cmake -DCMAKE_CXX_FLAGS="-std=c++11 -march=x86-64 -mtune=generic" .. && make -j4 && make install && \
    cd / && \
    rm -r googletest

WORKDIR /
RUN git clone https://github.com/weidai11/cryptopp.git && \
    cd /cryptopp && \
    git checkout CRYPTOPP_8_2_0 && \
    CXX_FLAGS="-march=x86-64 -mtune=generic -O3" make -j4 && \
    make install && \
    cd / && \
    rm -r cryptopp

# log4cplus
WORKDIR /
RUN wget --no-check-certificate -q \
    https://github.com/log4cplus/log4cplus/releases/download/REL_2_0_4/log4cplus-2.0.4.tar.gz && \
    tar -xzf log4cplus-2.0.4.tar.gz && \
    rm log4cplus-2.0.4.tar.gz && \
    cd log4cplus-2.0.4 && \
    autoreconf && \
    ./configure CXXFLAGS="--std=c++11 -march=x86-64 -mtune=generic -O3" --enable-static && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -r log4cplus-2.0.4

WORKDIR /
RUN git clone https://github.com/ethereum/evmjit.git && \
    cd /evmjit && \
    git checkout 4e9f3d76292c7de0c6613427761f843b1719f614
WORKDIR /evmjit/build
RUN cmake -DLLVM_DIR=/usr/lib/llvm-5.0/lib/cmake/llvm -DCMAKE_CXX_FLAGS="-march=x86-64 -mtune=generic -O3" ..
RUN cmake --build . --config RelWithDebInfo -- -j4

WORKDIR /
RUN git clone https://github.com/relic-toolkit/relic && \
    cd /relic && \
    git checkout 0998bfcb6b00aec85cf8d755d2a70d19ea3051fd && \
    mkdir build && \
    cd build && \
    cmake -DALLOC=AUTO -DWSIZE=64 -DWORD=64 -DRAND=UDEV -DSHLIB=ON -DSTLIB=ON -DSTBIN=OFF -DTIMER=HREAL -DCHECK=on -DVERBS=on -DARITH=x64-asm-254 -DFP_PRIME=254 -DFP_METHD="INTEG;INTEG;INTEG;MONTY;LOWER;SLIDE" -DCOMP="-O3 -funroll-loops -fomit-frame-pointer -finline-small-functions -march=x86-64 -mtune=generic" -DFP_PMERS=off -DFP_QNRES=on -DFPX_METHD="INTEG;INTEG;LAZYR" -DPP_METHD="LAZYR;OATEP" .. && \
    make -j4 && \
    make install && \
    cd / && \
    rm -r relic

WORKDIR /
RUN wget https://github.com/facebook/rocksdb/archive/v6.8.1.tar.gz && \
    tar -xzf v6.8.1.tar.gz && \
    rm v6.8.1.tar.gz && \
    cd /rocksdb-6.8.1 && \
    PORTABLE=1 make -j4 USE_RTTI=1 shared_lib && \
    PORTABLE=1 make install-shared && \
    cd / && \
    rm -r rocksdb-6.8.1

WORKDIR /
RUN git clone https://github.com/bitcoin-core/secp256k1 && \
    cd /secp256k1 && \
    git checkout 1e6f1f5ad5e7f1e3ef79313ec02023902bf8175c && \
    ./autogen.sh && \
    ./configure --enable-module-recovery CFLAGS="-march=x86-64 -mtune=generic" CPPFLAGS="-march=x86-64 -mtune=generic -O3" && \
    make -j4 && \
    make install && \
    cd / && \
    rm -r secp256k1

WORKDIR /
RUN git clone https://svc.blockhain_1:Nn2NPdU6Ny9ZaYyXs3DB@gitlab.eng.vmware.com/core-build/openssl.git && \
    cd /openssl && \
    git checkout OpenSSL_1_1_1a && \
    ./config && \
    make -j4 && \
    make test && \
    make install && \
    cd / && \
    rm -r openssl

# gRPC for DAML and HLF api server
WORKDIR /
RUN git clone -b v1.28.x --depth 1 --recurse-submodules https://github.com/grpc/grpc && \
    mkdir -p /grpc/third_party/protobuf/cmake/build && \
    cd /grpc/third_party/protobuf/cmake/build && \
    cmake -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/opt/protobuf \
          .. && \
    make -j$(nproc) install && \
    mkdir -p /grpc/cmake/build && \
    cd /grpc/cmake/build && \
    cmake -DgRPC_INSTALL=ON \
          -DgRPC_SSL_PROVIDER=package \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/opt/grpc \
          ../.. && \
    make -j$(nproc) install && \
    cd / && \
    rm -r grpc
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/grpc/lib:/opt/protobuf/lib
ENV PATH=$PATH:/opt/grpc/bin:/opt/protobuf/bin

# thrift is a jaeger dependency
WORKDIR /
RUN wget http://apache.mirrors.hoobly.com/thrift/0.11.0/thrift-0.11.0.tar.gz && \
    tar xzf thrift-0.11.0.tar.gz && \
    cd thrift-0.11.0 && \
    ./configure && \
    make -j4 && \
    make install && \
    cd .. && \
    rm -r thrift-0.11.0

# opentracing is a jaeger dependency
WORKDIR /
RUN git clone https://github.com/opentracing/opentracing-cpp && \
    cd opentracing-cpp && \
    git checkout v1.5.0 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j4 && \
    make install && \
    cd ../.. && \
    rm -r opentracing-cpp

# json is a jaeger dependency (and also a concord dependency, and the versions must match)
WORKDIR /
RUN git clone https://github.com/nlohmann/json && \
    cd json && \
    git checkout v3.7.3 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j4 && \
    make install && \
    cd ../.. && \
    rm -r json

# Jaeger build notes:
#
# * Jaeger wants to use the Hunter dependency manager, but this
#   ignores the dependencies (like Boost) we have already
#   installed. So, this build the deps manually for now.
#
# * By the same token, concord needs a Findthrift.cmake, so we copy
#   Jaeger's to the common cmake location.
WORKDIR /
RUN git clone https://github.com/jaegertracing/jaeger-client-cpp && \
    cd jaeger-client-cpp && \
    git checkout v0.5.0 && \
    mkdir build && \
    cd build && \
    cmake -DHUNTER_ENABLED=NO -DBUILD_TESTING=NO -DBUILD_SHARED_LIBS=NO -DJAEGERTRACING_BUILD_EXAMPLES=NO .. && \
    make -j4 && \
    make install && \
    cp ../cmake/Findthrift.cmake /usr/share/cmake-3.16/Modules/ && \
    cd ../.. && \
    rm -r jaeger-client-cpp

# Jaeger really wants to find BoostConfig.cmake, not
# FindBoost.cmake. But, this wasn't introduced until boost 1.70. This
# doesn't matter anyway, because the jaegertracing.cmake finds
# FindBoost.cmake first anyway. The following sed just removes the
# search for BoostConfig.cmake.
RUN sed -i '/boost_components/d' /usr/local/lib/cmake/jaegertracing/jaegertracingConfig.cmake

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

# Install Prometheus-cpp
WORKDIR /
RUN git clone https://github.com/jupp0r/prometheus-cpp.git && \
    cd prometheus-cpp && \
    git checkout v0.8.0 && \
    git submodule init && \
    git submodule update && \
    mkdir _build && \
    cd _build && \
    cmake -DBUILD_SHARED_LIBS=ON .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -r prometheus-cpp

# Used for concord-bft diagnostics
WORKDIR /
RUN wget --no-check-certificate -q \
    https://github.com/HdrHistogram/HdrHistogram_c/archive/0.11.2.tar.gz && \
    tar -xzf 0.11.2.tar.gz && \
    rm 0.11.2.tar.gz && \
    cd HdrHistogram_c-0.11.2 && \
    mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    cd ../.. && \
    rm -r HdrHistogram_c-0.11.2

# Python module dependencies - Please keep the command towards the end of this file
# - tatsu is used by CMF compiler
RUN pip3 install cpplint tatsu
