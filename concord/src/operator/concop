#!/usr/bin/env python3

import argparse
import requests
import json
import sys
from pprint import pprint

base_url = "http://localhost:41444/concord"


def req_release_download(args):
    res = requests.put(base_url + "/releases", timeout=args.timeout,
      params={"timeout": args.timeout - 1, "version": args.version})
    print(res.text)

def req_release_install(args):
    res = requests.put(base_url + "/releases/install", timeout=args.timeout,
      params={"timeout": args.timeout - 1, "version": args.version})
    print(res.text)

def req_release_status(args):
    res = requests.get(base_url + "/releases", timeout=args.timeout,
      params={"timeout": args.timeout - 1})
    print(res.text)

def req_wedge_status(args):
    res = requests.get(base_url + "/wedge/status", timeout=args.timeout,
      params={"timeout": args.timeout - 1})
    print(res.text)

def req_wedge(args):
    res = requests.put(base_url + "/wedge/stop", timeout=args.timeout,
      params={"timeout": args.timeout - 1})
    print(res.text)

def req_prune_latestPruneableBlockRequest(args):
    res = requests.get(base_url + "/prune/latestPruneableBlock", timeout=args.timeout,
      params={"timeout": args.timeout - 1})
    print(res.text)

def req_prune_execute(args):
    res = requests.put(base_url + "/prune/execute", timeout=args.timeout,
      params={"timeout": args.timeout - 1})
    print(res.text)


def args_parser():
    parser = argparse.ArgumentParser(description="Concord Operator CLI")
    parser.add_argument("--timeout", type=int, default=5,
                        help="Optional request timeout in seconds")

    # concop release
    subparsers = parser.add_subparsers()
    release = subparsers.add_parser("release",
      help="Manage releases and upgrades")
    release_subparsers = release.add_subparsers()

    download = release_subparsers.add_parser("download",
      help="Download images for a release on all replicas")
    download.add_argument("version", help="The release version to download")
    download.set_defaults(func=req_release_download)

    status = release_subparsers.add_parser("status",
      help="Get status of releases at all replicas")
    status.set_defaults(func=req_release_status)

    install = release_subparsers.add_parser("install",
      help="Install the downloaded release on all replicas")
    install.add_argument("version",
      help="The release version to install")
    install.set_defaults(func=req_release_install)

    # concop wedge
    wedge = subparsers.add_parser("wedge",
      help="Send wedge request which is used for maintenance.")
    wedge_subparsers = wedge.add_subparsers()

    wedge_status = wedge_subparsers.add_parser("status",
      help="Send a status query for all replicas. Returns the replicas' status")
    wedge_status.set_defaults(func=req_wedge_status)

    init_wedge = wedge_subparsers.add_parser("stop",
      help="Send a bft wedge command to the cluster. Returns {\"succ\": \"true\"} "
           " if the request has been received by the replicas successfully")
    init_wedge.set_defaults(func=req_wedge)

    # concop prune
    prune = subparsers.add_parser("prune", help="Send prune commands")
    prune_subparsers = prune.add_subparsers()

    lastPruneableBlockRequest = prune_subparsers.add_parser("latestPruneableBlock",
      help="Send a latestPruneableBlockRequest to all replicas."
           "returns a list of {replica, latestPruneableBlock}")
    lastPruneableBlockRequest.set_defaults(func=req_prune_latestPruneableBlockRequest)

    executePrune = prune_subparsers.add_parser("execute",
      help="Initiate a full prune request, this command gets the "
           "latest pruneable blocks from the replicas and then initiates a prune reuqest")
    executePrune.set_defaults(func=req_prune_execute)

    return parser


def main(params):
    parser = args_parser()
    args = parser.parse_args(params)
    if 'func' in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main(sys.argv[1:])
