#!/usr/bin/env python3

import argparse
import requests
import json
import sys
from pprint import pprint

base_url = "http://localhost:41444/concord"


def release_download(args):
    url = base_url + "/releases"
    res = requests.put(url, json={'version': args.version})
    pprint(json.loads(res.text))


def release_install(args):
    url = base_url + "/releases/install"
    res = requests.put(url, json={'version': args.version})
    pprint(json.loads(res.text))


def release_status(args):
    url = base_url + "/releases"
    res = requests.get(url, timeout=args.timeout)
    pprint(json.loads(res.text))

def wedge_status_impl(args):
    url = base_url + "/wedge/status"
    res = requests.get(url, timeout=args.timeout, params={"timeout": args.timeout - 1})
    pprint(json.loads(res.text))

def wedge_impl(args):
    url = base_url + "/wedge/stop"
    res = requests.put(url, timeout=args.timeout, params={"timeout": args.timeout - 1})
    pprint(json.loads(res.text))

def args_parser():
    parser = argparse.ArgumentParser(description="Concord Operator CLI")
    subparsers = parser.add_subparsers()
    release = subparsers.add_parser("release",
                                    help="Manage releases and upgrades")

    release_subparsers = release.add_subparsers()
    download = release_subparsers.add_parser(
        "download", help="Download images for a release on all replicas")
    download.add_argument("version",
                          type=float,
                          help="The release version to download")
    download.set_defaults(func=release_download)

    status = release_subparsers.add_parser(
        "status", help="Get status of releases at all replicas")
    status.add_argument("--timeout",
                        type=int,
                        help="Optional request timeout in seconds",
                        default=5)

    status.set_defaults(func=release_status)

    install = release_subparsers.add_parser(
        "install", help="Install the downloaded release on all replicas")
    install.add_argument("version",
                         type=float,
                         help="The release version to install")
    install.set_defaults(func=release_install)

    wedge = subparsers.add_parser("wedge",
                                 help="Send wedge request which is used for maintenance.")

    wedge_subparsers = wedge.add_subparsers()
    wedge_status = wedge_subparsers.add_parser("status", help="Send a status query for all replicas. "
                                                               "Returns the replicas' status")
    wedge_status.add_argument("--timeout",
                        type=int,
                        help="Optional request timeout in seconds. The timeout for the bft layer is smaller in 1 second"
                             " than this value",
                        default=5)

    wedge_status.set_defaults(func=wedge_status_impl)

    init_wedge = wedge_subparsers.add_parser("stop", help="Send a bft wedge command to the cluster. Returns {\"succ\": \"true\"} "
                                                          "if the request has been received by the replicas successfully")
    init_wedge.add_argument("--timeout",
                                  type=int,
                                  help="Optional request timeout in seconds.The timeout for the bft layer is smaller in 1 second"
                                        " than this value",
                                  default=5)

    init_wedge.set_defaults(func=wedge_impl)

    return parser


def main(params):
    parser = args_parser()
    args = parser.parse_args(params)
    if 'func' in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main(sys.argv[1:])
