# Copyright 2020 VMware, all rights reserved
# Dockerfile for building the BFT Client Pool Library image.

# Dependencies image.
FROM athena-docker-local.artifactory.eng.vmware.com/concord-core:prereqs-v23
LABEL Description="External Client Pool"

COPY ./concord /concord
COPY ./communication/src/main/proto /communication/src/main/proto

ENV LOG_CONFIGURATION /src/Example/log4cplus.properties
WORKDIR /concord/build
RUN cmake -DUSE_CONAN=OFF -DCMAKE_C_COMPILER=/usr/bin/clang-7 \
    -DCMAKE_CXX_COMPILER=/usr/bin/clang++-7 \
    -DCMAKE_CXX_FLAGS="-march=x86-64 -mtune=generic" .. && \
    make -j${nproc} && \
    make install -j${nproc}

## Base Run image
FROM ubuntu:18.04
LABEL Description="Concord"

RUN apt-get update && apt-get -y install \
    build-essential \
    zlib1g-dev \
    libcurl4-openssl-dev \
    libsnappy-dev \
    libboost-atomic1.65.1 \
    libboost-chrono1.65.1 \
    libboost-date-time1.65.1 \
    libboost-filesystem1.65.1 \
    libboost-program-options1.65.1 \
    libboost-system1.65.1 \
    libboost-thread1.65.1 \
    libyaml-cpp0.5v5 \
    libyaml-cpp-dev \
    libs3-dev \
    gdbserver \
    && rm -rf /var/lib/apt/lists/*

# SYMLINK NOTE: If you COPY a symlink, docker will copy the contents
# of the target file to a new file, doubling the space used in the
# image.

COPY --from=0 /usr/local/lib/liblog4cplus-2.0.so.3.4.4 /usr/local/lib/
RUN ln -s /usr/local/lib/liblog4cplus-2.0.so.3.4.4 /usr/local/lib/liblog4cplus-2.0.so.3
RUN ln -s /usr/local/lib/liblog4cplus-2.0.so.3.4.4 /usr/local/lib/liblog4cplus.so

COPY --from=0 /usr/local/lib/libprometheus-cpp-core.so.0.8.0 /usr/local/lib/
RUN for x in /usr/local/lib/libprometheus-cpp-core.so.0.8.0; do \
    ln -s $x ${x%%.0} && \
    ln -s $x ${x%%.0.8.0}; \
done

COPY --from=0 /usr/local/lib/libprometheus-cpp-pull.so.0.8.0 /usr/local/lib/
RUN for x in /usr/local/lib/libprometheus-cpp-pull.so.0.8.0; do \
    ln -s $x ${x%%.0} && \
    ln -s $x ${x%%.0.8.0}; \
done

COPY --from=0 /usr/local/lib/libprometheus-cpp-push.so.0.8.0 /usr/local/lib/
RUN for x in /usr/local/lib/libprometheus-cpp-push.so.0.8.0; do \
    ln -s $x ${x%%.0} && \
    ln -s $x ${x%%.0.8.0}; \
done

# gRPC
COPY --from=0 /opt/protobuf/include /opt/protobuf/include
COPY --from=0 /opt/grpc/include /opt/grpc/include
COPY --from=0 /opt/grpc/bin /opt/grpc/bin

# Copy libraries and create symlinks (docker copies instead of sym linking)
COPY --from=0 /opt/protobuf/lib/*.so.3.11.2.0 /opt/protobuf/lib/
RUN for x in /opt/protobuf/lib/*.so.3.11.2.0; do \
    ln -s $x ${x%%.3.11.2.0}; \
done

COPY --from=0 /opt/grpc/lib/*.so.1.28.2 /opt/grpc/lib/
RUN for x in /opt/grpc/lib/*.so.1.28.2; do \
    ln -s $x ${x%%.28.2} && \
    ln -s $x ${x%%.1.28.2}; \
done

COPY --from=0 /opt/grpc/lib/*.so.9.0.0 /opt/grpc/lib/
RUN for x in /opt/grpc/lib/*.so.9.0.0; do \
    ln -s $x ${x%%.0.0} && \
    ln -s $x ${x%%.9.0.0}; \
done

COPY --from=0 /opt/grpc/lib/*.so.1.2.11 /opt/grpc/lib/
RUN for x in /opt/grpc/lib/*.so.1.2.11; do \
    ln -s $x ${x%%.2.11} && \
    ln -s $x ${x%%.1.2.11}; \
done

COPY --from=0 /opt/grpc/lib/libabsl_* /opt/grpc/lib/

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/opt/grpc/lib:/opt/protobuf/lib

# evmjit is statically compiled, so we don't need to copy

COPY --from=0 /usr/local/lib/librelic.so /usr/local/lib/

COPY --from=0 /usr/local/lib/librocksdb.so.6.8.1 /usr/local/lib/
RUN ln -s /usr/local/lib/librocksdb.so.6.8.1 /usr/local/lib/librocksdb.so.6.8
RUN ln -s /usr/local/lib/librocksdb.so.6.8.1 /usr/local/lib/librocksdb.so.6
RUN ln -s /usr/local/lib/librocksdb.so.6.8.1 /usr/local/lib/librocksdb.so

COPY --from=0 /usr/local/lib/libsecp256k1.so.0.0.0 /usr/local/lib/
RUN ln -s /usr/local/lib/libsecp256k1.so.0.0.0 /usr/local/lib/libsecp256k1.so.0
RUN ln -s /usr/local/lib/libsecp256k1.so.0.0.0 /usr/local/lib/libsecp256k1.so

COPY --from=0 /usr/local/lib/libopentracing.so.1.5.0 /usr/local/lib
RUN ln -s /usr/local/lib/libopentracing.so.1.5.0 /usr/local/lib/libopentracing.so.1
RUN ln -s /usr/local/lib/libopentracing.so.1.5.0 /usr/local/lib/libopentracing.so

COPY --from=0 /usr/local/lib/libthrift-0.11.0.so /usr/local/lib
RUN ln -s /usr/local/lib/libthrift-0.11.0.so /usr/local/lib/libthrift.so

# Copy default Concord logger configuration so logging will be sanely configured
# if no custom configuration was provided when the cluster was set up.
COPY ./concord/resources/log4cplus.properties /concord/resources/log4cplus.properties
COPY ./concord/resources/metrics_config.yaml /concord/resources/metrics_config.yaml

COPY --from=0 /concord/build/src/external_client /concord/build/src/external_client
COPY --from=0 /usr/local/lib/libconcord_external_client_shared.so /usr/local/lib/libconcord_external_client_shared.so
COPY --from=0 /usr/local/lib/libconcord_utils_shared.so /usr/local/lib/libconcord_utils_shared.so
COPY --from=0 /usr/local/lib/libbftclient_shared.so /usr/local/lib/libbftclient_shared.so
COPY --from=0 /usr/local/lib/libutil_shared.so /usr/local/lib/libutil_shared.so
COPY --from=0 /usr/local/lib/libbftcommunication_shared.so /usr/local/lib/libbftcommunication_shared.so
COPY --from=0 /usr/local/include/ /usr/local/include/

# External client pool wrapper
COPY --from=0 /concord/build/test/external_client/external_client_wrp /opt/external_client_wrp
# Start script with corefiles enabled
COPY --from=0 /concord/build/src/external_client/extclient-wrapper-entrypoint.sh /opt/extclient-wrapper-entrypoint.sh

# Metrics port
EXPOSE 9873

# gdbserver port
EXPOSE 5678
